#include "stdafx.h"

// ========================================================
//	법선 벡터
// ========================================================

/*
	법선
		- 면 법선 (Face Normal) : 한 다각형이 바라보고 있는 방향(단위 백터)
		- 표면 법선 (Surface Normal) : 물체의 한 점에서 접하는 면을 그렸을때 그 면에 수직인 방향(단위 백터)
		- 정점 법선 (Vertex Normal) : 정점 주변 면의 면 백터의 평균 방향
		
		- 세 법선은 바라보는 방향을 결정한다.
		- 광선이 표면으로 입사할 때 정점에 대한 입사 각도를 알기 위해 정점 법선을 이용한다. 

	픽셀별 조명, 정점별 조명
		1. 픽셀별 조명(Per Pixel Lighting) : 정점의 보간과 픽셀별로 수행하는 것
		2. 정점별 조명(Per Vertex Lighting) : 정점 별로 수행하는 것으로 픽셀 조명보다 정확하지 않지만 비용이 저렴
*/

// ========================================================
//	법선 벡터의 계산
// ========================================================

/*
	p0, p1, p2 삼각형이 있을 때 두 변의 벡터
		1. u = p1 - p2
		2. v = p2 - p0

		- 삼각형 두 점 p0, p1이 있을 때 그 선분 안의 점 p의 정점 법선 n
			조건 : p = p0 + t(p1 - p0)
			법선 : n = n0 + t(n1 - n0)

	삼각형의 두 변으로 면 법선 계산
		n = (u X v) / ||u X v||

		- 미분이 가능한 표면(매끄러운 표면)인 경우 미적분을 기법을 통해서 표면의 점 법선을 구할 수 있다.
		- 일반적인 다각형은 정점 법선 평균을 이용하여 면 법선의 평균을 구함

	정점 주변에 면이 4개 있을 경우 정점 법선
		nₐᵥ₉ = (n0 + n1 + n2 + n3) / || n0 + n1 + n2 + n3 ||
*/

#include <D3DX10math.h>

namespace Sample
{
	// 삼각형의 세 점으로 면 법선 계산
	void CalcuFaceNormal(const D3DXVECTOR3& p0, const D3DXVECTOR3& p1, const D3DXVECTOR3& p2,
						 D3DXVECTOR3& out)
	{
		D3DXVECTOR3 u = p1 - p0, v = p2 - p0;

		D3DXVec3Cross(&out, &u, &v);
		D3DXVec3Normalize(&out, &out);
	}
}

// ========================================================
//	법선 벡터의 변환
// ========================================================

/*
	- u와 v는 법선 벡터 n의 수직이지만 비균등 비례 변환 A(uA = v1A - v0A)같이 다른 행렬을 곱하면 nA는 법선이 아니게 된다.
	- u와 v에 변환 행렬을 곱했을 때 그에 직교되는 법선 벡터(uA º nB = 0 중 nB)를 구해야 한다.

	변환된 벡터의 수직 행렬
		1. u º n = 0			-> 변환된 벡터와 법선 벡터는 직교
		2. unᵀ = 0				-> 내적을 행렬 곱셈으로 변환
		3. u(AA⁻¹)nᵀ = 0			-> u 오른쪽에 단위 행렬을 곱함
		4. (uA)(A⁻¹nᵀ) = 0		-> 결합법칙을 이용하여 괄호 재구성
		5. (uA)((A⁻¹nᵀ)ᵀ)ᵀ = 0	-> 오른쪽 괄호에 전치 항등식 적용
		6. (uA)(n(A⁻¹)ᵀ)ᵀ = 0	-> 전치를 오른쪽 항에 1번 적용
		7. uA º n(A⁻¹)ᵀ = 0		-> 행렬의 곱셈을 내적으로 변환
		8. uA º nB = 0

		∴ B = (A⁻¹)ᵀ, A의 역행렬의 전치 행렬

		- A가 전치행렬일 경우 B = (A⁻¹)ᵀ = (Aᵀ)ᵀ = A, A == B
		- 역행렬의 전치 행렬을 구해주는 함수는 MathHelpler.h의 InverseTranspose에 있음
*/