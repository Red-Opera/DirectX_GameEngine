#include "ShaderHeader/PointLight.hlsl"
#include "ShaderHeader/LightShader.hlsl"
#include "ShaderHeader/LightVector.hlsl"
#include "ShaderHeader/Transform.hlsl"

struct VertexOut
{
    float3 viewPosition : Position;
    float3 viewNormal : Normal;
    float4 position : SV_Position;
};

cbuffer ObjectColor
{
    float3 materialColor;       // 물체의 재질 색상 
    float3 specularColor;       // Specular 색상
    float specularPower;        // Specular 강도
    float specularGlass;        // 반짝임 강도
};

VertexOut VS(float3 localPosition : Position, float3 normal : Normal)
{
    VertexOut vertexOut;
    
  //vertexOut.viewPosition = (float3) mul(float4(localPosition, 1.0f), transform);     // localPosition에서 worldPosition을 구함
  //vertexOut.normal = mul(normal, (float3x3) transform);                               // 해당 위치에서 Normal을 구함
    
    vertexOut.viewPosition = (float3) mul(float4(localPosition, 1.0f), cameraTransform); // 카메라 위치에서 worldPosition을 구함
    vertexOut.viewNormal = mul(normal, (float3x3) cameraTransform);                         // 해당 위치에서 Normal을 구함
    vertexOut.position = mul(float4(localPosition, 1.0f), worldViewProjection);             // 화면 상의 위치를 구함
    
    return vertexOut;
}

float4 PS(float3 viewPosition : Position, float3 viewNormal : Normal) : SV_Target
{
    // 해당 픽셀의 노멀 값이 1이 넘지 않고 방향만 가리킬 수 있도록 설정
    viewNormal = normalize(viewNormal);
    
    // 정점에서 빛의 거리와 방향을 구함
    const LightVector lightVector = GetLightVector(lightViewPosition, viewPosition);
    
    // 상쇠된 빛의 강도를 구하고 분산광을 거리에 따른 빛의 강도를 구함
    const float attResult = GetAttenuate(attConst, attLin, attQuad, lightVector.distance);
    const float3 diffuse = GetDiffuse(diffuseColor, diffuseIntensity, attResult, lightVector.vertexToLightDir, viewNormal);
    
    // 반사광의 specular를 구함
    const float3 specular = GetSpecular(diffuseColor * diffuseIntensity * specularColor, specularPower, viewNormal, lightVector.vertexToLight, viewPosition, attResult, specularGlass);
    
    // 주변광과 분산광을 합친 후 1.0이 넘어간 경우 최대 1.0으로 제한함
    return float4(saturate((diffuse + ambient) * materialColor + specular), 1.0f);
}